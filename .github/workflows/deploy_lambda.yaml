name: Deploy to Amazon

on:
  push:
    branches:
      - main

env:
  AWS_REGION: eu-west-3
  ECR_REPOSITORY: volatility_ecr
  LAMBDA_NAME: volatility_ddb

defaults:
  run:
    shell: bash

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login_ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build_image
        env:
          ECR_REGISTRY: ${{ steps.login_ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Cambia al directorio donde se encuentra el Dockerfile y otros archivos necesarios
          cd volatility
          # Construye la imagen Docker
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
          # Sube la imagen a ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # Guarda el nombre completo de la imagen como una salida para uso en pasos posteriores
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Deploy function
        env:
          ECR_REGISTRY: ${{ steps.build_image.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Actualiza la funci√≥n lambda con la nueva imagen de ECR
          aws lambda update-function-code --region ${{ env.AWS_REGION }} --function-name ${{ env.LAMBDA_NAME }} --image-uri ${{ steps.build_image.outputs.image }}
